---
import { availability } from "../content/availability.json";
import { getLangFromUrl, useTranslations } from "../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Helper to check if a date is within any unavailable range
function isDateUnavailable(dateStr) {
  const date = new Date(dateStr);
  return availability.some(({ start, end }) => {
    const startDate = new Date(start);
    const endDate = new Date(end);
    return date >= startDate && date <= endDate;
  });
}

// Helper to get days in a month
function getDaysInMonth(year, month) {
  return new Date(year, month + 1, 0).getDate();
}

// Helper to format date as YYYY-MM-DD
function formatDate(year, month, day) {
  return `${year}-${String(month + 1).padStart(2, "0")}-${String(day).padStart(2, "0")}`;
}

const allMonths = [];
const now = new Date();
for (let i = 0; i < 24; i++) {
  const date = new Date(now.getFullYear(), now.getMonth() + i, 1);
  allMonths.push(date);
}

// Group months by year
const monthsByYear: Record<string, Date[]> = {};
allMonths.forEach((month) => {
  const year = month.getFullYear();
  if (!monthsByYear[year]) {
    monthsByYear[year] = [];
  }
  monthsByYear[year].push(month);
});
---

<div class="flex items-center gap-8 mb-6">
  <div class="flex items-center gap-2">
    <span class="h-8 w-9 rounded bg-secondary border border-black inline-block"
    ></span>
    <span class="font-semibold">{t("availability.available")}</span>
  </div>
  <div class="flex items-center gap-2">
    <span class="h-8 w-9 rounded bg-gray-100 border border-black inline-block"
    ></span>
    <span class="font-semibold">{t("availability.unavailable")}</span>
  </div>
</div>
<div>
  {
    Object.entries(monthsByYear).map(([year, yearMonths]) => (
      <div class="mb-12">
        <h2 class="text-2xl font-bold mb-6 text-center">{year}</h2>
        <div class="grid gap-8 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
          {yearMonths.map((month) => {
            const year = month.getFullYear();
            const monthNum = month.getMonth();
            const daysInMonth = getDaysInMonth(year, monthNum);
            const firstDay = new Date(year, monthNum, 1).getDay(); // 0 (Sun) - 6 (Sat)
            const blanks = Array(firstDay).fill(null);
            const days = Array.from({ length: daysInMonth }, (_, i) => i + 1);
            const allCells = [...blanks, ...days];

            return (
              <div class="border border-gray-300 p-4 rounded-lg shadow-sm bg-white">
                <div class="font-bold mb-2 text-lg">
                  {`${month.toLocaleString(lang === "en" ? "en-US" : "de-DE", { month: "long" })} ${month.getFullYear()}`}
                </div>
                <div class="grid grid-cols-7 mb-1 text-sm text-gray-500 text-center">
                  <>
                    <span>{t("calendar.weekday.1")}</span>
                    <span>{t("calendar.weekday.2")}</span>
                    <span>{t("calendar.weekday.3")}</span>
                    <span>{t("calendar.weekday.4")}</span>
                    <span>{t("calendar.weekday.5")}</span>
                    <span>{t("calendar.weekday.6")}</span>
                    <span>{t("calendar.weekday.7")}</span>
                  </>
                </div>
                <div class="grid grid-cols-7 gap-1">
                  {allCells.map((day, idx) => {
                    if (day === null) return <span class="h-8 w-9" />;
                    const dateStr = formatDate(
                      month.getFullYear(),
                      month.getMonth(),
                      day
                    );
                    const isUnavailable = isDateUnavailable(dateStr);
                    return (
                      <span
                        class={`h-8 w-9 flex items-center justify-center rounded text-center text-base ${isUnavailable ? "bg-gray-100 font-extralight" : "bg-secondary"}`}
                      >
                        {day}
                      </span>
                    );
                  })}
                </div>
              </div>
            );
          })}
        </div>
      </div>
    ))
  }
</div>
